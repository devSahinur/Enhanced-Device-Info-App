// components/DeviceInfo.js

'use client';
import React, { useState } from 'react';
import useDeviceInfo from '../hooks/useDeviceInfo';
import {
  DevicePhoneMobileIcon,
  CpuChipIcon,
  GlobeAltIcon,
  ClipboardIcon,
} from '@heroicons/react/24/solid';
import InfoCard from './InfoCard';
import InfoTable from './InfoTable';

const DeviceInfo = () => {
  const { deviceInfo, readClipboard } = useDeviceInfo();
  const [searchTerm, setSearchTerm] = useState('');

  const handleDownloadJSON = () => {
    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(deviceInfo, null, 2));
    const downloadAnchorNode = document.createElement('a');
    downloadAnchorNode.setAttribute("href", dataStr);
    downloadAnchorNode.setAttribute("download", "device-info.json");
    document.body.appendChild(downloadAnchorNode);
    downloadAnchorNode.click();
    downloadAnchorNode.remove();
  };

  const handleDownloadPDF = () => {
    import('jspdf').then(({ jsPDF }) => {
      const doc = new jsPDF();
      let y = 10;

      // Header
      doc.setFontSize(18);
      doc.setFont("helvetica", "bold");
      doc.text("Device Information Report", 105, y, { align: 'center' });
      y += 10;

      // Current Date
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      const currentDate = new Date().toLocaleString();
      doc.text(`Generated on: ${currentDate}`, 105, y, { align: 'center' });
      y += 10;

      // Separator
      doc.setLineWidth(0.5);
      doc.line(15, y, 195, y);
      y += 10;

      // Categorize the device information
      const categories = {
        "Basic Information": ["User Agent", "Platform", "Language", "Languages", "Cookies Enabled", "Java Enabled"],
        "Hardware Information": ["Hardware Concurrency", "Device Memory (GB)", "Number of Logical Processors", "Device Memory"],
        "Screen Information": ["Screen Resolution", "Available Screen Size", "Color Depth", "Pixel Depth", "Viewport Size", "Device Pixel Ratio"],
        "Network Information": ["Connection Type", "Downlink"],
        "Browser Details": ["Browser Name", "Browser Version", "OS Name", "OS Version", "Device Type", "Manufacturer", "Model"],
        "Additional Information": ["Timezone", "Locale", "Touch Support", "Do Not Track", "Media Capabilities", "Geolocation", "WebGL Info", "Battery Level", "Battery Charging", "Clipboard Data"],
      };

      // Iterate through categories
      Object.entries(categories).forEach(([category, keys]) => {
        doc.setFontSize(14);
        doc.setFont("helvetica", "bold");
        doc.text(category, 15, y);
        y += 7;

        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");
        keys.forEach((key) => {
          const value = deviceInfo[key];
          const text = `${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`;
          const splitText = doc.splitTextToSize(text, 180);
          doc.text(splitText, 15, y);
          y += splitText.length * 7;

          // Check for page overflow
          if (y > 270) {
            doc.addPage();
            y = 10;
          }
        });

        y += 5; // Add some space after each category
      });

      // Footer
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.setFont("helvetica", "normal");
      doc.text(`Generated by Device Info App`, 105, 280, { align: 'center' });

      doc.save('device-info.pdf');
    });
  };

  if (!deviceInfo) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="flex items-center space-x-2">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-blue-500"></div>
          <p className="text-gray-500 text-lg">Loading device information...</p>
        </div>
      </div>
    );
  }

  // Define categories
  const categories = {
    "Basic Information": ["User Agent", "Platform", "Language", "Languages", "Cookies Enabled", "Java Enabled"],
    "Hardware Information": ["Hardware Concurrency", "Device Memory (GB)", "Number of Logical Processors", "Device Memory"],
    "Screen Information": ["Screen Resolution", "Available Screen Size", "Color Depth", "Pixel Depth", "Viewport Size", "Device Pixel Ratio"],
    "Network Information": ["Connection Type", "Downlink"],
    "Browser Details": ["Browser Name", "Browser Version", "OS Name", "OS Version", "Device Type", "Manufacturer", "Model"],
    "Additional Information": ["Timezone", "Locale", "Touch Support", "Do Not Track", "Media Capabilities", "Geolocation", "WebGL Info", "Battery Level", "Battery Charging", "Clipboard Data"],
  };

  return (
    <div className="max-w-6xl mx-auto bg-gray-50 shadow-md rounded-lg p-6 sm:p-8 mt-8">
      <h2 className="text-2xl sm:text-3xl font-bold mb-6 text-center text-gray-800">Your Device Information</h2>
      
      <div className="mb-6 flex flex-col sm:flex-row sm:justify-between sm:items-start">
        <input
          type="text"
          placeholder="Search device information..."
          className="w-full sm:w-1/3 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4 sm:mb-0"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          aria-label="Search device information"
        />
        <div className="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0">
          <button
            onClick={handleDownloadJSON}
            className="flex items-center justify-center bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
            aria-label="Download device information as JSON"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            Download JSON
          </button>
          <button
            onClick={handleDownloadPDF}
            className="flex items-center justify-center bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition"
            aria-label="Download device information as PDF"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h8M8 11h8M8 15h8M8 19h8M5 3h14a2 2 0 012 2v14a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2z" />
            </svg>
            Download PDF
          </button>
          <button
            onClick={readClipboard}
            className="flex items-center justify-center bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
            aria-label="Fetch clipboard data"
          >
            <ClipboardIcon className="h-5 w-5 mr-2" />
            Fetch Clipboard
          </button>
        </div>
      </div>

      {/* Display Clipboard Data Immediately if Available */}
      {deviceInfo["Clipboard Data"] !== 'Not Available' && (
        <InfoCard icon={ClipboardIcon} title="Clipboard Data">
          <p className="text-gray-700 whitespace-pre-wrap">{deviceInfo["Clipboard Data"]}</p>
        </InfoCard>
      )}

      {/* Display All Information Categorized */}
      {Object.entries(categories).map(([category, keys]) => {
        // Filter keys based on searchTerm
        const filteredKeys = keys.filter((key) =>
          key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (typeof deviceInfo[key] === 'string' && deviceInfo[key].toLowerCase().includes(searchTerm.toLowerCase())) ||
          (typeof deviceInfo[key] === 'object' && JSON.stringify(deviceInfo[key]).toLowerCase().includes(searchTerm.toLowerCase()))
        );

        // If no keys match, don't render the category
        if (filteredKeys.length === 0) return null;

        return (
          <InfoCard key={category} icon={getCategoryIcon(category)} title={category}>
            <InfoTable data={filteredKeys.map(key => [key, deviceInfo[key]])} />
          </InfoCard>
        );
      })}

      {/* Show 'No Results Found' if no categories match */}
      {Object.entries(categories).every(([category, keys]) => {
        const filteredKeys = keys.filter((key) =>
          key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (typeof deviceInfo[key] === 'string' && deviceInfo[key].toLowerCase().includes(searchTerm.toLowerCase())) ||
          (typeof deviceInfo[key] === 'object' && JSON.stringify(deviceInfo[key]).toLowerCase().includes(searchTerm.toLowerCase()))
        );
        return filteredKeys.length === 0;
      }) && (
        <div className="text-center text-gray-500 mt-8">
          No results found for "{searchTerm}"
        </div>
      )}
    </div>
  );
};

// Helper function to get icons based on category
const getCategoryIcon = (category) => {
  switch(category) {
    case "Basic Information":
      return GlobeAltIcon;
    case "Hardware Information":
      return CpuChipIcon;
    case "Screen Information":
      return DevicePhoneMobileIcon;
    case "Network Information":
      return GlobeAltIcon;
    case "Browser Details":
      return GlobeAltIcon;
    case "Additional Information":
      return ClipboardIcon;
    default:
      return GlobeAltIcon;
  }
};

export default DeviceInfo;
